<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zyplayer.doc.db.framework.db.mapper.base.BaseMapper">

	<select id="getDatabaseList" resultType="com.zyplayer.doc.db.framework.db.dto.DatabaseInfoDto">
		select SCHEMA_NAME dbName from `information_schema`.SCHEMATA
	</select>

	<select id="getTableDdl" resultType="java.util.Map">
		show create table `${dbName}`.${tableName}
	</select>

	<select id="getTableList" resultType="com.zyplayer.doc.db.framework.db.dto.TableInfoDto">
		select table_schema dbName,table_name tableName, table_comment as tableComment
		from `information_schema`.tables
		<if test="dbName != null">where table_schema=#{dbName}</if>
	</select>

	<select id="getTableColumnList" resultType="com.zyplayer.doc.db.framework.db.dto.TableColumnDescDto">
		SELECT table_name as tableName,COLUMN_NAME as name,column_comment description,data_type type,
		COALESCE(CHARACTER_MAXIMUM_LENGTH,NUMERIC_PRECISION) as `length`,NUMERIC_SCALE as numericScale,
		if(COLUMN_KEY='PRI','1','0') as primaryKey,
		if(is_nullable='YES','1','0') nullable
		FROM `INFORMATION_SCHEMA`.Columns
		WHERE table_schema=#{dbName}
		<if test="tableName != null">and table_name=#{tableName}</if>
		ORDER BY ordinal_position
	</select>

	<select id="getTableStatus" resultType="com.zyplayer.doc.db.controller.vo.TableStatusVo">
		<!-- show table status from `${dbName}` like #{tableName} -->
		select TABLE_NAME as name, ENGINE as engine, VERSION as version, ROW_FORMAT as rowFormat,
		TABLE_ROWS as `rows`, AVG_ROW_LENGTH as avgRowLength, DATA_LENGTH as dataLength,
		MAX_DATA_LENGTH as maxDataLength, INDEX_LENGTH as indexLength, DATA_FREE as dataFree,
		AUTO_INCREMENT as autoIncrement, CREATE_TIME as createTime, UPDATE_TIME as updateTime,
		CHECK_TIME as checkTime, TABLE_COLLATION as `collation`, CHECKSUM as checksum,
		CREATE_OPTIONS as createOptions, TABLE_COMMENT as comment
		from `information_schema`.tables
		where table_schema=#{dbName} and table_name=#{tableName}
	</select>

	<select id="getTableColumnDescList" resultType="com.zyplayer.doc.db.framework.db.dto.TableColumnDescDto">
		select 1
	</select>

	<select id="getTableAndColumnBySearch" resultType="com.zyplayer.doc.db.framework.db.dto.QueryTableColumnDescDto">
		SELECT TABLE_NAME as tableName, column_name as columnName, column_comment as description
		FROM `INFORMATION_SCHEMA`.Columns
		WHERE table_schema=#{dbName} AND (COLUMN_NAME like #{searchText} or column_comment like #{searchText})
	</select>

	<select id="getTableDescList" resultType="com.zyplayer.doc.db.framework.db.dto.TableDescDto">
		select table_name tableName, table_comment as description
		from `information_schema`.tables
		<where>
			<if test="dbName != null">and table_schema=#{dbName}</if>
			<if test="tableName != null">and table_name=#{tableName}</if>
		</where>
	</select>

	<insert id="updateTableDesc">
		alter table `${dbName}`.${tableName} comment #{newDesc}
	</insert>

	<insert id="updateTableColumnDesc">
		alter table `${dbName}`.${tableName} modify column ${columnName}
		${columnInfo.columnType} ${columnInfo.isNullable} ${columnInfo.columnDefault} ${columnInfo.extra}
		comment #{newDesc}
	</insert>

	<select id="getProcedureCount" resultType="java.lang.Long">
		select count(1) from mysql.proc
		<include refid="ProcedureListCondition"/>
	</select>

	<select id="getProcedureList" resultType="com.zyplayer.doc.db.framework.db.dto.ProcedureDto">
		select `db`, `name`, `type`, `definer`, `created` from mysql.proc
		<include refid="ProcedureListCondition"/>
		limit #{param.pageSize} offset #{param.offset}
	</select>

	<select id="getProcedureDetail" resultType="com.zyplayer.doc.db.framework.db.dto.ProcedureDto">
		select `db`, `name`, `type`, `definer`, `created`, `body`, `param_list` as paramList, `returns` from mysql.proc where db=#{dbName} and `type`=#{typeName} and name=#{procName}
	</select>

	<delete id="deleteProcedure">
		 DROP ${typeName} IF EXISTS `${dbName}`.`${procName}`
	</delete>

	<delete id="deleteTableLineData">
		delete from `${dbName}`.`${tableName}` where
		<foreach collection="lineParam.entrySet()" index="key" item="value">
			${key} = #{value}
		</foreach>
	</delete>

	<sql id="ProcedureListCondition">
		 where db=#{param.dbName}
		 <if test="param.name != null and param.name != ''">and `name` like #{param.name}</if>
		 <if test="param.type != null and param.type != ''">and `type` = #{param.type}</if>
	</sql>

</mapper>
